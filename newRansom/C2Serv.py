import datetime

from gevent import monkey

monkey.patch_all()
import configparser
import json
import os

import bottle
import requests
from bottle import TEMPLATE_PATH
from bottle import jinja2_template as template
from bottle import redirect, request, route, run, static_file
from ndc_setting import NDC_Correction

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMPLATE_PATH.append('static/html')

conf = configparser.ConfigParser()
conf.read('frontend.ini', encoding="utf-8_sig")

# Listen IF/Port
LISTEN_IF = conf['frontend']['LISTEN_IF']
LISTEN_PORT = conf['frontend']['LISTEN_PORT']

# DEBUG
DEBUG_MODE = (conf['frontend']['DEBUG'] == 'True')

# 設定ファイル
CONF_F = conf['frontend']['CONF_F']

# BASIC認証のユーザ名とパスワード
USERNAME = conf['frontend']['USERNAME']
PASSWORD = conf['frontend']['PASSWORD']

# switch_controler の IP
SW_CNTR = conf['frontend']['SW_CNTR']
SW_CNTR_PORT = conf['frontend']['SW_CNTR_PORT']

# Send Mail On のURL
Send_Mail = conf['frontend']['SEND_MAIL']

# HTML Titleの取得
TITLE = conf['html']['TITLE']

# フィルター設定の読み込み
print('Load Configurations...:')
confs = NDC_Correction(CONF_F, (SW_CNTR, SW_CNTR_PORT))

# Hackey の LED 点滅 URL の設定読み込み
for sect in conf.sections():
    if sect.startswith("HACKEY_"):
        # Hackey Turn On のURL
        confs.hackeys[sect[7:]].turn_on_url = conf[sect]['Hackey_TurnOn']
        # Hackey Turn Off のURL
        confs.hackeys[sect[7:]].turn_off_url = conf[sect]['Hackey_TurnOff']
        # エラー のURL
        confs.hackeys[sect[7:]].error_url = conf[sect]['Hackey_ERROR']

print('Load Configurations Complete')


def auth_check(username, password):
    u"""
    BASIC認証のユーザ名とパスワードをチェック
    @bottle.auth_basic(check)で適用
    """

    return username == USERNAME and password == PASSWORD


@bottle.get('/static/css/<filename:re:.*\.css>')
def get_css(filename):
    return static_file(filename, root="static/css")


@route('/', method=["GET", "POST"])
@bottle.auth_basic(auth_check)
# 対象descpが5つ毎にページが遷移する
def doc_root():
    result_list = [(descp, 'loading') for descp in confs.descriptions()]
    if request.query.get('page') != None:
        page = int(request.query.get('page'))
        list_size = len(confs.descp_stat_dic())
        if page * 5 > list_size:
            redirect("/")
        result_list = result_list[5 * page:(5 * (page + 1))]
        page += 1
        if page * 5 > list_size:
            page = page - 1
            if page < 0:
                page = 0
        back_page = page - 2
        if back_page < 0:
            back_page = 0
    else:
        back_page = 1
        page = 1
        result_list = result_list[0:5]

    return template('top', result_list=result_list, page=page,
                    back_page=back_page, title=TITLE)


@route('/stat', method=["GET", "POST"])
def get_stat():
    descp = request.query.get('descp')
    force = request.query.get('force')
    if descp == None:
        return 'error'

    if force != None and force.lower() == 'true':
        force = True
    else:
        force = False
    result = confs.entries[descp].update_stat(force)
    # TODO 2 エラー処理
    if type(result) == bool:
        if result:
            event_mes = 'turn_on'
        else:
            event_mes = 'turn_off'
    else:
        event_mes = 'error'

    print(event_mes)
    return event_mes


# /home へのアクセスは / へリダイレクト
@route('/home', method=["GET", "POST"])
def old_home():
    redirect("/", code=303)


@route('/upload', method=["GET", "POST"])
def upload_to_sc():
    result = confs.upload_conf()
    return str(result)


def make_mail_content(descp: str, event_mes: str, propriety: str, time: str, id: str):
    mail_content = {}
    subject = '[' + event_mes + 'イベント]' + descp + ': ' + propriety
    body = '対象: ' + descp + '<br>' + 'イベント: ' + event_mes + '<br>' + '実行時刻: ' + time + '<br>' + 'Hackey-シリアル-No: ' + id + '<br>' + '実行結果: ' + propriety
    mail_content['value1'] = subject
    mail_content['value2'] = body

    headers = {'content-type': 'application/json'}
    convert_json = json.dumps(mail_content)
    requests.post(Send_Mail, data=convert_json, headers=headers)
    print('メールを送信しました: ' + subject)


# filter 処理
@route('/filter', method=["GET", "POST"])
def filter():
    time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    if request.json == None:
        print('hackey外からのアクセスが確認されました')
        descp = request.query.get('descp')
        event = request.query.get('event')
        device_id = confs.entries[descp].hackey_id

    else:
        print('hackeyからのアクセスが確認されました')
        content_type = request.get_header('Content-Type')
        if content_type != 'application/json':  # JSON 以外なら処理終了
            print('不正な Content_Type です:' + content_type)
            return False
        device_id = request.json['hackey']['device_id']
        descp = confs.hackeys[device_id].description
        event = request.json['hackey']['event']

    try:
        if event == 'turn_on':
            event_mes = 'ネットワーク遮断'
            result = confs.entries[descp].turn_on()
        else:
            event_mes = 'ネットワーク開放'
            result = confs.entries[descp].turn_off()
    except Exception:
        result = False

    if result:
        mes = '成功'
    else:
        mes = '失敗'

    make_mail_content(descp, event_mes, mes, time, device_id)
    return str(confs.entries[descp].update_stat())


# 画像ファイルへアクセス
@route('/images/button')
def send_image():
    print('image_info')
    status = request.query.get('status')
    if status == 'turn_on':
        filename = 'ON.png'
    elif status == 'turn_off':
        filename = 'OFF.png'
    elif status == 'error':
        filename = 'ERROR.png'

    elif status == 'executing':
        filename = 'executing.gif'
    else:
        filename = 'loading.gif'
    return static_file(filename, root='static/images/', mimetype='image/png')


# 以下は JS、CSS の読み込み
@route('/bootstrap/css/<filename>')
def bs_css_dir(filename):
    """ set css dir """
    return static_file(filename, root="static/bootstrap/css/")


@route('/static/images/<filename>')
def bs_images_dir(filename):
    """ set css dir """
    return static_file(filename, root="static/images/")


@route('/bootstrap/js/<filename>')
def bs_js_dir(filename):
    """ set js dir """
    return static_file(filename, root="static/bootstrap/js/")


@route('/js/<filename>')
def js_dir(filename):
    """ set js dir """
    return static_file(filename, root="static/js/")


run(server="gevent", host=LISTEN_IF, port=LISTEN_PORT, debug=DEBUG_MODE)
